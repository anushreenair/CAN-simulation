
# JD Requirement vs Project Mapping

## 1. Design, develop, and maintain embedded software
- **JD Expectation**: Design and develop embedded software solutions for automotive applications, leveraging expertise in embedded systems and real-time operating systems (RTOS).
- **Project Coverage**: ✔️ C code simulating RTOS-like behavior for automotive

## 2. Embedded systems & RTOS
- **JD Expectation**: Knowledge and expertise in embedded systems and RTOS.
- **Project Coverage**: ✔️ Task scheduling every 500ms and 1000ms mimics RTOS

## 3. Automotive communication protocols
- **JD Expectation**: Implement automotive communication protocols for system integration.
- **Project Coverage**: ✔️ CAN-style message format (ID 0x120, mock protocol logic)

## 4. Integration with microcontroller architectures
- **JD Expectation**: Integrate software modules with microcontroller architectures for seamless operation within vehicle systems.
- **Project Coverage**: ⚠️ Simulated only – no real MCU, but structured to resemble embedded logic

## 5. AUTOSAR and ASPICE
- **JD Expectation**: Integrate embedded software development activities into automotive processes following AUTOSAR and ASPICE standards.
- **Project Coverage**: ✔️ Project docs (Excel & PNG) simulate ASPICE-style processes (requirements, traceability, architecture)

## 6. Collaborate on requirements & architectures
- **JD Expectation**: Collaborate with teams to define requirements and develop software architectures.
- **Project Coverage**: ✔️ requirements.xlsx + architecture.png show this capability clearly

## 7. Testing and debugging with CAN tools
- **JD Expectation**: Utilize CAN tools such as Vector CANalyzer and CANoe for testing and debugging embedded software components.
- **Project Coverage**: ⚠️ Real tools not used (e.g., CANalyzer), but printf() simulates output for debugging

## 8. Manage requirements (DOORS)
- **JD Expectation**: Use tools like DOORS to manage embedded software requirements and ensure alignment with project goals.
- **Project Coverage**: ✔️ Simulated with Excel sheet for traceability

## 9. Documentation
- **JD Expectation**: Document software design specifications, test plans, and validation reports.
- **Project Coverage**: ✔️ Included README, Excel traceability matrix, architecture diagram

## 10. Version Control (Git), JIRA, Gerrit
- **JD Expectation**: Use version control systems like Git and collaboration platforms like JIRA and Gerrit.
- **Project Coverage**: ✔️ Git-ready structure with documentation for team sharing

## 11. Compliance to ASPICE processes
- **JD Expectation**: Ensure compliance with automotive product development processes and standards such as ASPICE.
- **Project Coverage**: ✔️ Simulation reflects understanding of the standard

## 12. Code reviews, static analysis, QA
- **JD Expectation**: Conduct code reviews, static analysis, and contribute to quality assurance activities.
- **Project Coverage**: ⚠️ No explicit static analysis tool used, but code is modular, readable, and documented

